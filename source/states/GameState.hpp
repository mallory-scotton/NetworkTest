///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2025 TekyoDrift
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Header Guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "states/StateManager.hpp"
#include "network/Packet.hpp"
#include "network/Client.hpp"
#include <SFML/Graphics.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
// Pre-define the StateManager class
///////////////////////////////////////////////////////////////////////////////
class StateManager;

///////////////////////////////////////////////////////////////////////////////
/// \brief Base class for the game states
///
///////////////////////////////////////////////////////////////////////////////
class GameState
{
protected:
    ///////////////////////////////////////////////////////////////////////////
    // Protected properties
    ///////////////////////////////////////////////////////////////////////////
    sf::RenderWindow* m_window;     //<! Pointer to the window for rendering
    StateManager* m_manager;        //<! Pointer to the state manager
    Client* m_client;               //<! Pointer to the client
    bool* m_debug;                  //<! Pointer to the debug state

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~GameState() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Initialize the game state
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void init(void) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Handle the event of the window
    ///
    /// \param event The current event to handle
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void handleEvent(sf::Event event) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Handle the packed base on the window
    ///
    /// \param packet The packet to handle
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void handlePacket(Packet packet) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Update the game state
    ///
    /// \param deltaT The current delta time
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void update(float deltaT) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Render the game state
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void render(void) = 0;

public:
    ///////////////////////////////////////////////////////////////////////////
    // Friend the StateManager class
    ///////////////////////////////////////////////////////////////////////////
    friend class StateManager;
};

} // namespace tkd
