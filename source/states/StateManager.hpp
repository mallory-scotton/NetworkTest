///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2025 TekyoDrift
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Header Guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "states/GameState.hpp"
#include "network/Packet.hpp"
#include <SFML/Graphics.hpp>
#include <memory>
#include <stack>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
// Pre-define the GameState class
///////////////////////////////////////////////////////////////////////////////
class GameState;

///////////////////////////////////////////////////////////////////////////////
/// \brief Utility class to handle states
///
///////////////////////////////////////////////////////////////////////////////
class StateManager
{
public:
    ///////////////////////////////////////////////////////////////////////////
    // Custom type alias
    ///////////////////////////////////////////////////////////////////////////
    using State = std::unique_ptr<GameState>;

private:
    ///////////////////////////////////////////////////////////////////////////
    // Private properties
    ///////////////////////////////////////////////////////////////////////////
    std::stack<State> m_states;     //<! The stack of states
    sf::RenderWindow& m_window;     //<! The rendering window

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    /// \param window The window to link the manager to
    ///
    ///////////////////////////////////////////////////////////////////////////
    StateManager(sf::RenderWindow& window);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Push a new state on top of the stack
    ///
    /// \param state The state to push
    ///
    ///////////////////////////////////////////////////////////////////////////
    void push(State state);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Pop the top state
    ///
    ///////////////////////////////////////////////////////////////////////////
    void pop(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Chnage the current state
    ///
    /// \param state The new state to change with
    ///
    ///////////////////////////////////////////////////////////////////////////
    void change(State state);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Handle the event base on the current state
    ///
    /// \param event The event to handle
    ///
    ///////////////////////////////////////////////////////////////////////////
    void handleEvent(sf::Event event);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Handle the packed base on the current state
    ///
    /// \param packet The packet to handle
    ///
    ///////////////////////////////////////////////////////////////////////////
    void handlePacket(Packet packet);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Update the game using the top state
    ///
    ///////////////////////////////////////////////////////////////////////////
    void update(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Render the game using the top state
    ///
    ///////////////////////////////////////////////////////////////////////////
    void render(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Check if the state manager is empty
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool empty(void) const;
};

} // namespace tkd
