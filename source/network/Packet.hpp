///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2025 TekyoDrift
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "utils/Types.hpp"
#include "utils/Vec2.hpp"
#include <vector>
#include <cstring>
#include <memory>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Packet
{
public:
    ///////////////////////////////////////////////////////////////////////////
    // Constant for the maximum size of a packet
    ///////////////////////////////////////////////////////////////////////////
    static const size_t MAX_SIZE = 1024;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class Type : int
    {
        Connect,
        Disconnect,
        PlayerMove,
        PlayerList,
        PlayerJoined,
        PlayerLeft
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    // Packet properties
    ///////////////////////////////////////////////////////////////////////////
    Data m_data;
    size_t m_rpos = 0;
    size_t m_wpos = 0;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Packet(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    ///
    ///////////////////////////////////////////////////////////////////////////
    Packet(Type type);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    Packet(const Packet& other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    ///
    /// \param type
    /// \param data
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T>
    Packet(Type type, T data)
    {
        m_data.resize(MAX_SIZE);
        memset(m_data.data(), 0, MAX_SIZE);
        *this << type;
        *this << data;
    }

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    ///
    /// \param value
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T>
    Packet& operator<<(const T& value)
    {
        size_t size = sizeof(T);
        if (m_wpos + size <= MAX_SIZE) {
            std::memcpy(m_data.data() + m_wpos, &value, size);
            m_wpos += size;
        }
        return (*this);
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    ///
    /// \param value
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T>
    Packet& operator>>(T& value)
    {
        size_t size = sizeof(T);
        if (m_rpos + size <= MAX_SIZE) {
            std::memcpy(&value, m_data.data() + m_rpos, size);
            m_rpos += size;
        }
        return (*this);
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    ///
    /// \param vec
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T>
    Packet& operator<<(const Vec2<T>& vec)
    {
        *this << vec.x;
        *this << vec.y;
        return (*this);
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    ///
    /// \param vec
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T>
    Packet& operator>>(Vec2<T>& vec)
    {
        *this >> vec.x;
        *this >> vec.y;
        return (*this);
    }

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const Byte* data(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Byte* data(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    size_t size(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void clear(void);
};

} // namespace tkd
