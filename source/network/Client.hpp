///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2025 TekyoDrift
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "utils/Types.hpp"
#include "network/Packet.hpp"
#include "network/Network.hpp"
#include <string>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Client
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Private properties
    ///////////////////////////////////////////////////////////////////////////
    bool m_connected;       //<! Connected status
    Socket m_socket;        //<! The socket of the client
    Network m_network;      //<! Network initialisator

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Client(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Initialize the client and trying to connect on the server
    ///
    /// \param address The server address (e.g: 127.0.0.1)
    /// \param port The server port (e.g: 55001)
    ///
    ///////////////////////////////////////////////////////////////////////////
    Client(const std::string& address, Uint32 port);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Client destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Client();

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Try to connect the client on the server
    ///
    /// \param address The address of the server
    /// \param port The port of the server
    ///
    /// \return True if the connexion was successful, false otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool connect(const std::string& address, Uint32 port);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Disconnect the client from the server
    ///
    ///////////////////////////////////////////////////////////////////////////
    void disconnect(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Check if the client is connected to the server
    ///
    /// \return True if the client is connected
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool isConnected(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Send a packet to the server if connected
    ///
    /// \param packet The packet to send
    ///
    ///////////////////////////////////////////////////////////////////////////
    void sendPacket(Packet& packet);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Receive packed from the server
    ///
    /// \param packet The reference to the packed to fill
    ///
    /// \return The packet status
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool receivePacket(Packet& packet);
};

} // namespace tkd
